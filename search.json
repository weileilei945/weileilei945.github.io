[{"title":"面试中一些模糊的问题","url":"http://yoursite.com/面试中一些模糊的问题/","content":"<p>今天去手百部门进行了一些面试，有些东西好久不用真的会慢慢的生疏，我把面试中遇到的一些问题我回答上的还有没有回答上的都列出来（需要写代码的部分必须要完全手写出来），让自己铭记有些东西不复习一下再简单也会忘的。</p>\n<h2 id=\"CSS有几种盒模型？\"><a href=\"#CSS有几种盒模型？\" class=\"headerlink\" title=\"CSS有几种盒模型？\"></a>CSS有几种盒模型？</h2><p>盒模型一共有两种模式，一种是标准模式，另一种就是怪异模式。</p>\n<p>我们都知道当你建立html的时候都会生成一个<code>DOCTYPE</code>标签，而且知道<code>DOCTYPE</code>标签表示的是标准文档类型<br>比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE HTML PUBLIC  <span class=\"string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span>  <span class=\"string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>然而如果我们没有声明<code>DOCTYPE</code>的话，在IE6、IE7、IE8就会触发<code>怪异模式</code>。<br>在标准模式下的盒模型就是我们平常认知的盒模型。但是在怪异模式下，盒子的总宽度是包含内边距padding和边框border的。如果不好认知的话，我们可以用css3的<code>box-sizing</code>来举例。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">box-sizing</span>: <span class=\"selector-tag\">content-box</span></span><br><span class=\"line\">// 这是标准模式计算的</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">box-sizing</span>: <span class=\"selector-tag\">border-box</span></span><br><span class=\"line\">// 这是怪异模式计算的</span><br></pre></td></tr></table></figure>\n<h2 id=\"前端如何解决跨域问题？有几种做法\"><a href=\"#前端如何解决跨域问题？有几种做法\" class=\"headerlink\" title=\"前端如何解决跨域问题？有几种做法?\"></a>前端如何解决跨域问题？有几种做法?</h2><h3 id=\"为什么要用跨域？\"><a href=\"#为什么要用跨域？\" class=\"headerlink\" title=\"为什么要用跨域？\"></a>为什么要用跨域？</h3><p>了解了同源策略（同域名、同协议、同端口）的话就知道为什么要跨域了。<br>要知道<code>&lt;img&gt;</code>的src、<code>&lt;link&gt;</code>的href、<code>&lt;script&gt;</code>的src这三个都不遵循同源策略，所以可以用他们来考虑跨域，jsonp就是使用的<code>&lt;script&gt;</code>标签实现的</p>\n<p>JSONP由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数。回调函数的名字一般是在请求中指定的。而数据就是传入回调函数中的 JSON 数据。</p>\n<p>在写src的路径时要传入你自己设定的<code>callback</code>函数，页面中的<code>callback</code>的参数就是响应的数据。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JSONP实现跨域2<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mydiv\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span>&gt;</span>点击<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleResponse</span>(<span class=\"params\">response</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(response);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> oBtn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'btn'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    oBtn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;     </span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        script.src = <span class=\"string\">\"https://api.douban.com/v2/book/search?q=javascript&amp;count=1&amp;callback=handleResponse\"</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.body.insertBefore(script, <span class=\"built_in\">document</span>.body.firstChild);   </span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>首先JSONP的安全问题不好保证，其次不容易确定JSONP的请求是否失败。但是如果接口中没有callback函数的接口我们要如何判断请求呢？那我们可以了解一下<code>CORS(跨域资源共享)</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span>  (request.from === jsonp) ? callback(data) : data ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"什么是CORS？\"><a href=\"#什么是CORS？\" class=\"headerlink\" title=\"什么是CORS？\"></a>什么是CORS？</h3><p><a href=\"https://yq.aliyun.com/articles/69313\" target=\"_blank\" rel=\"noopener\">CORS</a>：Cross-Origin Resource Sharing 跨源资源共享</p>\n<h2 id=\"vue的双向绑定原理？view到model，model到view是如何变化的？\"><a href=\"#vue的双向绑定原理？view到model，model到view是如何变化的？\" class=\"headerlink\" title=\"vue的双向绑定原理？view到model，model到view是如何变化的？\"></a><code>vue</code>的双向绑定原理？<code>view</code>到<code>model</code>，<code>model</code>到<code>view</code>是如何变化的？</h2><h2 id=\"jQuery的源码？对源码的理解与运行机制？\"><a href=\"#jQuery的源码？对源码的理解与运行机制？\" class=\"headerlink\" title=\"jQuery的源码？对源码的理解与运行机制？\"></a><code>jQuery</code>的源码？对源码的理解与运行机制？</h2><h2 id=\"webpack源码\"><a href=\"#webpack源码\" class=\"headerlink\" title=\"webpack源码\"></a>webpack源码</h2><h2 id=\"手机上最常见的开关按钮排版及样式\"><a href=\"#手机上最常见的开关按钮排版及样式\" class=\"headerlink\" title=\"手机上最常见的开关按钮排版及样式\"></a>手机上最常见的开关按钮排版及样式</h2><h2 id=\"vue的父子传参以及vuex的使用？项目中最常用的方法\"><a href=\"#vue的父子传参以及vuex的使用？项目中最常用的方法\" class=\"headerlink\" title=\"vue的父子传参以及vuex的使用？项目中最常用的方法\"></a><code>vue</code>的父子传参以及<code>vuex</code>的使用？项目中最常用的方法</h2><h2 id=\"ES6中async和promise的用法\"><a href=\"#ES6中async和promise的用法\" class=\"headerlink\" title=\"ES6中async和promise的用法\"></a><code>ES6</code>中<code>async</code>和<code>promise</code>的用法</h2><h2 id=\"闭包的优点与缺点，写出事例：给每个li便签加点击事件，点击后输出对应的index？\"><a href=\"#闭包的优点与缺点，写出事例：给每个li便签加点击事件，点击后输出对应的index？\" class=\"headerlink\" title=\"闭包的优点与缺点，写出事例：给每个li便签加点击事件，点击后输出对应的index？\"></a>闭包的优点与缺点，写出事例：给每个li便签加点击事件，点击后输出对应的<code>index</code>？</h2><h2 id=\"模块化思想？seaJs与requireJs的一些区别-转\"><a href=\"#模块化思想？seaJs与requireJs的一些区别-转\" class=\"headerlink\" title=\"模块化思想？seaJs与requireJs的一些区别?(转)\"></a>模块化思想？<code>seaJs</code>与<code>requireJs</code>的一些区别?(转)</h2><p>模块化的开发方式可以提高代码复用率，方便进行代码的管理。通常一个文件就是一个模块，有自己的作用域，只向外暴露特定的变量和函数。目前流行的js模块化规范有CommonJS、AMD、CMD以及ES6的模块系统。</p>\n<h3 id=\"一、CommonJS\"><a href=\"#一、CommonJS\" class=\"headerlink\" title=\"一、CommonJS\"></a>一、CommonJS</h3><p>Node.js是commonJS规范的主要实践者，它有四个重要的环境变量为模块化的实现提供支持：<code>module</code>、<code>exports</code>、<code>require</code>、<code>global</code>。实际使用时，用<code>module.exports</code>定义当前模块对外输出的接口（不推荐直接用<code>exports</code>），用<code>require</code>加载模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模块math.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> basicNum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; <span class=\"comment\">//在这里写上需要向外暴露的函数、变量</span></span><br><span class=\"line\">  add: add,</span><br><span class=\"line\">  basicNum: basicNum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用自定义的模块时，参数包含路径，可省略.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'./math'</span>);</span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用核心模块时，不需要带路径</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">http.createService(...).listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>commonJS用同步的方式加载模块。在服务端，模块文件都存在本地磁盘，读取非常快，所以这样做不会有问题。但是在浏览器端，限于网络原因，更合理的方案是使用异步加载。</p>\n<h3 id=\"二、AMD和require-js\"><a href=\"#二、AMD和require-js\" class=\"headerlink\" title=\"二、AMD和require.js\"></a>二、AMD和require.js</h3><p>AMD规范采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。这里介绍用<code>require.js</code>实现AMD规范的模块化：用<code>require.config()</code>指定引用路径等，用<code>define()</code>定义模块，用<code>require()</code>加载模块。</p>\n<p>首先我们需要引入<code>require.js</code>文件和一个入口文件<code>main.js</code>。<code>main.js</code>中配置<code>require.config()</code>并规定项目中用到的基础模块</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** 网页中引入require.js及main.js **/</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/require.js\"</span> <span class=\"attr\">data-main</span>=<span class=\"string\">\"js/main\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** main.js 入口文件/主模块 **/</span></span><br><span class=\"line\"><span class=\"comment\">// 首先用config()指定各模块路径和引用名</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">  baseUrl: <span class=\"string\">\"js/lib\"</span>,</span><br><span class=\"line\">  paths: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"jquery\"</span>: <span class=\"string\">\"jquery.min\"</span>,  <span class=\"comment\">//实际路径为js/lib/jquery.min.js</span></span><br><span class=\"line\">    <span class=\"string\">\"underscore\"</span>: <span class=\"string\">\"underscore.min\"</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 执行基本操作</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"jquery\"</span>,<span class=\"string\">\"underscore\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, _</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// some code here</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>引用模块的时候，我们将模块名放在[]中作为reqiure()的第一参数；如果我们定义的模块本身也依赖其他模块,那就需要将它们放在[]中作为define()的第一参数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义math.js模块</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> basicNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        add: add,</span><br><span class=\"line\">        basicNum :basicNum</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 定义一个依赖underscore.js的模块</span></span><br><span class=\"line\">define([<span class=\"string\">'underscore'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> classify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">list</span>)</span>&#123;</span><br><span class=\"line\">    _.countBy(list, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> num &gt; <span class=\"number\">30</span> ? <span class=\"string\">'old'</span> : <span class=\"string\">'young'</span>;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    classify :classify</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用模块，将模块放在[]内</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'jquery'</span>, <span class=\"string\">'math'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$, math</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = math.add(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  $(<span class=\"string\">\"#sum\"</span>).html(sum);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、CMD和sea-js\"><a href=\"#三、CMD和sea-js\" class=\"headerlink\" title=\"三、CMD和sea.js\"></a>三、CMD和sea.js</h3><p>require.js在申明依赖的模块时会在第一之间加载并执行模块内的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"f\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c, d, e, f</span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">// 等于在最前面声明并初始化了要用到的所有模块</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 即便没用到某个模块 b，但 b 还是提前执行了</span></span><br><span class=\"line\">      b.foo()</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>CMD是另一种js模块化方案，它与AMD很类似，不同点在于：AMD 推崇依赖前置、提前执行，CMD推崇依赖就近、延迟执行。此规范其实是在sea.js推广过程中产生的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** AMD写法 **/</span></span><br><span class=\"line\">define([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"f\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c, d, e, f</span>) </span>&#123; </span><br><span class=\"line\">     <span class=\"comment\">// 等于在最前面声明并初始化了要用到的所有模块</span></span><br><span class=\"line\">    a.doSomething();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 即便没用到某个模块 b，但 b 还是提前执行了</span></span><br><span class=\"line\">        b.doSomething()</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** CMD写法 **/</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>); <span class=\"comment\">//在需要时申明</span></span><br><span class=\"line\">    a.doSomething();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>);</span><br><span class=\"line\">        b.doSomething();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** sea.js **/</span></span><br><span class=\"line\"><span class=\"comment\">// 定义模块 math.js</span></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery.js'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exports.add = add;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 加载模块</span></span><br><span class=\"line\">seajs.use([<span class=\"string\">'math.js'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">math</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sum = math.add(<span class=\"number\">1</span> + <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、ES6-Module\"><a href=\"#四、ES6-Module\" class=\"headerlink\" title=\"四、ES6 Module\"></a>四、ES6 Module</h3><p>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，旨在成为浏览器和服务器通用的模块解决方案。其模块功能主要由两个命令构成：<code>export</code>和<code>import</code>。<code>export</code>命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 定义模块 math.js **/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> basicNum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; basicNum, add &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 引用模块 **/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; basicNum, add &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./math'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">    ele.textContent = add(<span class=\"number\">99</span> + basicNum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上例所示，使用<code>import</code>命令的时候，用户需要知道所要加载的变量名或函数名。其实ES6还提供了<code>export default</code>命令，为模块指定默认输出，对应的<code>import</code>语句不需要使用大括号。这也更趋近于ADM的引用写法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** export default **/</span></span><br><span class=\"line\"><span class=\"comment\">//定义输出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123; basicNum, add &#125;;</span><br><span class=\"line\"><span class=\"comment\">//引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> math <span class=\"keyword\">from</span> <span class=\"string\">'./math'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">    ele.textContent = math.add(<span class=\"number\">99</span> + math.basicNum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ES6的模块不是对象，import命令会被 JavaScript 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。</p>\n<h3 id=\"五、-ES6-模块与-CommonJS-模块的差异\"><a href=\"#五、-ES6-模块与-CommonJS-模块的差异\" class=\"headerlink\" title=\"五、 ES6 模块与 CommonJS 模块的差异\"></a>五、 ES6 模块与 CommonJS 模块的差异</h3><h4 id=\"1-CommonJS-模块输出的是一个值的拷贝，ES6-模块输出的是值的引用。\"><a href=\"#1-CommonJS-模块输出的是一个值的拷贝，ES6-模块输出的是值的引用。\" class=\"headerlink\" title=\"1. CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。\"></a>1. CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</h4><ul>\n<li><p>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</p>\n</li>\n<li><p>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的import有点像 Unix 系统的“符号连接”，原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p>\n</li>\n</ul>\n<h4 id=\"2-CommonJS-模块是运行时加载，ES6-模块是编译时输出接口。\"><a href=\"#2-CommonJS-模块是运行时加载，ES6-模块是编译时输出接口。\" class=\"headerlink\" title=\"2. CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。\"></a>2. CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</h4><ul>\n<li><p>运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。</p>\n</li>\n<li><p>编译时加载: ES6 模块不是对象，而是通过 export 命令显式指定输出的代码，import时采用静态命令的形式。即在import时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。</p>\n</li>\n</ul>\n<h2 id=\"写一个person-39-li-39-39-lei-39-的类要求\"><a href=\"#写一个person-39-li-39-39-lei-39-的类要求\" class=\"headerlink\" title=\"写一个person(&#39;li&#39;,&#39;lei&#39;)的类要求?\"></a>写一个<code>person(&#39;li&#39;,&#39;lei&#39;)</code>的类要求?</h2><p>问：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);</span><br><span class=\"line\"><span class=\"comment\">// 输出 ‘li lei’</span></span><br><span class=\"line\"></span><br><span class=\"line\">person.name = <span class=\"string\">'li hua'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 改变person的名字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.firstName);</span><br><span class=\"line\"><span class=\"comment\">// 'li'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.lastName);</span><br><span class=\"line\"><span class=\"comment\">// 'hua'</span></span><br></pre></td></tr></table></figure>","categories":[],"tags":["web"]},{"title":"ES6中async的使用","url":"http://yoursite.com/ES6中aysnc-await的使用/","content":"<p>在项目中有时会遇到异步操作的问题，async就是解决异步操作的终极操作。我会以终极三问（what，why，when）的形式来说明什么是async。由于这是第一篇文章不知道怎么写，有很大部分是借鉴阮一峰老的原文，事例将会从我的项目中摘取。</p>\n<h2 id=\"async是什么？\"><a href=\"#async是什么？\" class=\"headerlink\" title=\"async是什么？\"></a>async是什么？</h2><h3 id=\"官方例子\"><a href=\"#官方例子\" class=\"headerlink\" title=\"官方例子\"></a>官方例子</h3><p><a href=\"http://es6.ruanyifeng.com/#docs/async\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p>async相当于对Generator 函数的一个语法糖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> readFile = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">fileName</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(fileName, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, data</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (error) <span class=\"keyword\">return</span> reject(error);</span><br><span class=\"line\">      resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> gen = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f1 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f2 = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>用async函数就换成了 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> asyncReadFile = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f1 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/fstab'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> f2 = <span class=\"keyword\">await</span> readFile(<span class=\"string\">'/etc/shells'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f1.toString());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f2.toString());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>那async与Genetator有什么区别呢？我自己的理解就是，更简单，更语义化，而且会自动执行。</p>\n<p>(1)自动执行</p>\n<blockquote>\n<p>我们知道 <code>generator</code> 函数需要通过调用<code>next()</code>方法，才能往后执行到下一个<code>yield</code>，但是<code>async</code>函数却不需要，它能够自动向后执行。</p>\n</blockquote>\n<p>(2) 更语义化</p>\n<blockquote>\n<p><code>async</code>和<code>await</code>，比起星号和<code>yield</code>，语义更清楚了。<code>async</code>表示函数里有异步操作，<code>await</code>表示紧跟在后面的表达式需要等待结果。</p>\n</blockquote>\n<p>(3) 更广的适用性</p>\n<blockquote>\n<p><code>yield</code>命令后面只能跟随<code>Trunk</code>或<code>Promise</code>，但是<code>await</code>后面除了可以是<code>Promise</code>，也可以是普通类型，但是这样就和同步没有任何区别了。</p>\n</blockquote>\n<p>(4) 返回值不同</p>\n<blockquote>\n<p><code>generator</code>返回的是一个遍历器对象，而<code>async</code>返回的是一个<code>Promise</code>对象</p>\n</blockquote>\n<h2 id=\"async怎么用？\"><a href=\"#async怎么用？\" class=\"headerlink\" title=\"async怎么用？\"></a>async怎么用？</h2><p>await 命令</p>\n<p>await语句后面的 Promise 变为reject，那么整个async函数都会中断执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'hello world'</span>); <span class=\"comment\">// 不会执行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>要知道的是async返回的是一个<code>Promise</code>对象，后面可以使用<code>then</code>方法添加回调</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStockPriceByName</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> symbol = <span class=\"keyword\">await</span> getStockSymbol(name);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stockPrice = <span class=\"keyword\">await</span> getStockPrice(symbol);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> stockPrice;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getStockPriceByName(<span class=\"string\">'goog'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>也可以使用<code>catch</code>方法捕捉错误信息,然而使用时需要注意<code>catch</code>的一些使用方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'出错了'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"built_in\">console</span>.log(v))</span><br><span class=\"line\"><span class=\"comment\">// 如果不想因为第一个异步失败，而中断后面的异步操作</span></span><br><span class=\"line\"><span class=\"comment\">// hello world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'出错了'</span>)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f()</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> <span class=\"built_in\">console</span>.log(v))</span><br><span class=\"line\"><span class=\"comment\">// 原因同上</span></span><br><span class=\"line\"><span class=\"comment\">// 出错了</span></span><br><span class=\"line\"><span class=\"comment\">// hello world</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"项目中的案例\"><a href=\"#项目中的案例\" class=\"headerlink\" title=\"项目中的案例\"></a>项目中的案例</h2><p>案例背景：复合报表（项目功能之一）<br>复合报表是由用户来进行配置高自由度的展现报表，用户可以配置模块(组件)之间的查询条件以及共有参数、私有参数，来展示一个多功能查询，展示数据工具。<br>（因涉及公司产品产权问题不进行细节介绍）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  checkAllReady() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.$watch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.allReady &amp;&amp; <span class=\"keyword\">this</span>.publicAllReady,</span><br><span class=\"line\">        val =&gt; &#123;</span><br><span class=\"line\">          val ? resolve(val) : reject(val);</span><br><span class=\"line\">        &#125;, &#123;<span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> p.resolve(val);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'组件的参数还没准备好'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">async</span> getData() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.checkAllReady();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"keyword\">this</span>.parseApi(<span class=\"keyword\">this</span>.option.api);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> publicParams = <span class=\"keyword\">this</span>.blocks.getParams();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = <span class=\"keyword\">this</span>.option.f_id;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.showChart = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    api.get(url, $.extend(&#123;id&#125;,publicParams,<span class=\"keyword\">this</span>.getParams())).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data.code) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$message.error(data.msg);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'remote-data-completed'</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.data.is_sync_query_mode) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.renderChart(data.data);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'remote-data-completed'</span>,data);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> taskId = data.data.id;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.getStatus(taskId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["ES6"]},{"title":"Hello World","url":"http://yoursite.com/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"分类","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"关于","url":"http://yoursite.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://yoursite.com/css/page-home.css","content":"html.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url('/images/homepage2.jpg');\n  background-color: transparent;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}\nhtml.page-archives {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url('/images/blogpage2.jpg');\n  background-color: transparent;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n}\nhtml.page-tag,html.page-category,html.page-about {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url('/images/blogpage2.jpg');\n  background-color: transparent;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n}","categories":[],"tags":[]},{"title":"搜索","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"标签","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]